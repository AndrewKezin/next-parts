generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  fullName         String
  email            String
  password         String
  phone            String?
  role             UserRole          @default(USER)
  status           UserStatus        @default(INACTIVE)
  verified         DateTime?
  provider         String?
  providerId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
  addresses         UserAddresses[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id                     String                @id @unique
  name                   String
  imageUrl               String
  categoryId             Int
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  category               Category              @relation(fields: [categoryId], references: [id])
  items                  ProductItem[]
  gearboxesManufacturers GearboxManufacturer[] @relation("GearboxManufacturerToProduct")
  ingredients            Ingredient[]          @relation("IngredientToProduct")
}

model ProductItem {
  id              String     @id @unique
  price           Int
  quantity        Int        @default(1)
  thickness       Float?
  quantityOfTeeth Int?
  volume          Int?
  productId       String
  cartItems       CartItem[]
  product         Product    @relation(fields: [productId], references: [id])
}

model Ingredient {
  id        String     @id @unique
  name      String
  price     Int
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[] @relation("CartItemToIngredient")
  products  Product[]  @relation("IngredientToProduct")
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int?       @unique
  token       String?
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User?      @relation(fields: [userId], references: [id])
  items       CartItem[]
}

model CartItem {
  id            Int          @id @default(autoincrement())
  cartId        Int
  productItemId String
  quantity      Int          @default(1)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  cart          Cart         @relation(fields: [cartId], references: [id])
  productItem   ProductItem  @relation(fields: [productItemId], references: [id])
  ingredients   Ingredient[] @relation("CartItemToIngredient")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int?
  token       String
  totalAmount Int
  status      OrderStatus
  paymentId   String?
  items       Json
  fullName    String
  deliveryMethod DeliveryMethod? @default(PICKUP)
  phone       String
  address     String?
  email       String
  comment     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User?       @relation(fields: [userId], references: [id])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, code])
}

model GearboxManufacturer {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  products  Product[] @relation("GearboxManufacturerToProduct")
}

model TestPayment {
  id            String @id @unique
  amount        Json
  confirmation  Json
  metadata      Json
  status        String
  description   String
  recipient     Json
  createdAt     DateTime
  test          Boolean
  paid          Boolean
  refundable    Boolean
}

model UserAddresses {
  id        Int      @id @default(autoincrement())
  userId    Int      
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Monitor {
  id        Int      @id @default(autoincrement())
  warnEvent       WarnEvent
  message   String
  userId    Int?
  productId String?
  productItemId String?
  orderId   Int?
  delayedTo DateTime?
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCESS
  CANCELED
  PROCESSING
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  INDEBTED
  BANNED
  DELETED
}

enum DeliveryMethod {
  PICKUP
  DELIVERY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  CANCELED
  PROCESSING
}

enum WarnEvent {
  USER
  PRODUCT
  ORDER
  OTHER
}
